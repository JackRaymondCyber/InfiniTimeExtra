<<<<<<< HEAD
#include "Calculator.h"
#include <string>
#include <stack>
#include <cfloat>
#include <cmath>
#include <map>
#include <memory>

using namespace Pinetime::Applications::Screens;

// Anonymous Namespace for all the structs
namespace {
  struct CalcTreeNode {
    virtual double calculate() = 0;
  };

  struct NumNode : CalcTreeNode {
    double value;

    double calculate() override {
      return value;
    };
  };

  struct BinOp : CalcTreeNode {
    std::shared_ptr<CalcTreeNode> left;
    std::shared_ptr<CalcTreeNode> right;

    char op;

    double calculate() override {
      // make sure we have actual numbers
      if (!right || !left) {
        errno = EINVAL;
        return 0.0;
      }

      double rightVal = right->calculate();
      double leftVal = left->calculate();
      switch (op) {
        case '^':
          // detect overflow
          if (log2(leftVal) + rightVal > 31) {
            errno = ERANGE;
            return 0.0;
          }
          return pow(leftVal, rightVal);
        case 'x':
          // detect over/underflowflow
          if ((DBL_MAX / abs(rightVal)) < abs(leftVal)) {
            errno = ERANGE;
            return 0.0;
          }
          return leftVal * rightVal;
        case '/':
          // detect under/overflow
          if ((DBL_MAX * abs(rightVal)) < abs(leftVal)) {
            errno = ERANGE;
            return 0.0;
          }
          // detect divison by zero
          if (rightVal == 0.0) {
            errno = EDOM;
            return 0.0;
          }
          return leftVal / rightVal;
        case '+':
          // detect overflow
          if ((DBL_MAX - rightVal) < leftVal) {
            errno = ERANGE;
            return 0.0;
          }
          return leftVal + rightVal;
        case '-':
          // detect underflow
          if ((DBL_MIN + rightVal) > leftVal) {
            errno = ERANGE;
            return 0.0;
          }
          return leftVal - rightVal;
      }
      errno = EINVAL;
      return 0.0;
    };
  };

  uint8_t getPrecedence(char op) {
    switch (op) {
      case '^':
        return 4;
      case 'x':
      case '/':
        return 3;
      case '+':
      case '-':
        return 2;
    }
    return 0;
  }

  bool leftAssociative(char op) {
    switch (op) {
      case '^':
        return false;
      case 'x':
      case '/':
      case '+':
      case '-':
        return true;
    }
    return false;
  }

}

static void eventHandler(lv_obj_t* obj, lv_event_t event) {
  auto calc = static_cast<Calculator*>(obj->user_data);
  calc->OnButtonEvent(obj, event);
}

Calculator::~Calculator() {
  lv_obj_clean(lv_scr_act());
}

static const char* buttonMap1[] = {
  "7", "8", "9", "/", "\n",
  "4", "5", "6", "x", "\n",
  "1", "2", "3", "-", "\n",
  ".", "0", "=", "+", "",
};

static const char* buttonMap2[] = {
  "7", "8", "9", "(", "\n",
  "4", "5", "6", ")", "\n",
  "1", "2", "3", "^", "\n",
  ".", "0", "=", "+", "",
};

Calculator::Calculator(DisplayApp* app, Controllers::MotorController& motorController) : Screen(app), motorController {motorController} {
  result = lv_label_create(lv_scr_act(), nullptr);
  lv_label_set_long_mode(result, LV_LABEL_LONG_BREAK);
  lv_label_set_text(result, "0");
  lv_obj_set_size(result, 180, 60);
  lv_obj_set_pos(result, 0, 0);

  returnButton = lv_btn_create(lv_scr_act(), nullptr);
  lv_obj_set_size(returnButton, 52, 52);
  lv_obj_set_pos(returnButton, 186, 0);
  lv_obj_t* returnLabel;
  returnLabel = lv_label_create(returnButton, nullptr);
  lv_label_set_text(returnLabel, "<=");
  lv_obj_align(returnLabel, nullptr, LV_ALIGN_CENTER, 0, 0);
  returnButton->user_data = this;
  lv_obj_set_event_cb(returnButton, eventHandler);

  buttonMatrix = lv_btnmatrix_create(lv_scr_act(), nullptr);
  lv_btnmatrix_set_map(buttonMatrix, buttonMap1);
  lv_obj_set_size(buttonMatrix, 240, 180);
  lv_obj_set_pos(buttonMatrix, 0, 60);
  lv_obj_set_style_local_pad_all(buttonMatrix, LV_BTNMATRIX_PART_BG, LV_STATE_DEFAULT, 0);
  buttonMatrix->user_data = this;
  lv_obj_set_event_cb(buttonMatrix, eventHandler);
}

void Calculator::eval() {
  std::stack<char> input {};
  for (int8_t i = position - 1; i >= 0; i--) {
    input.push(text[i]);
  }
  std::stack<std::shared_ptr<CalcTreeNode>> output {};
  std::stack<char> operators {};
  bool expectingNumber = true;
  int8_t sign = +1;
  while (!input.empty()) {
    if (input.top() == '.') {
      input.push('0');
    }
    if (isdigit(input.top())) {
      char numberStr[31];
      uint8_t strln = 0;
      uint8_t pointpos = 0;
      while (!input.empty() && (isdigit(input.top()) || input.top() == '.')) {
        if (input.top() == '.') {
          if (pointpos != 0) {
            motorController.RunForDuration(10);
            return;
          }
          pointpos = strln;
        } else {
          numberStr[strln] = input.top();
          strln++;
        }
        input.pop();
      }
      // replacement for strtod() since using that increased .txt by 76858 bzt
      if (pointpos == 0) {
        pointpos = strln;
      }
      double num = 0;
      for (uint8_t i = 0; i < pointpos; i++) {
        num += (numberStr[i] - '0') * pow(10, pointpos - i - 1);
      }
      for (uint8_t i = 0; i < strln - pointpos; i++) {
        num += (numberStr[i + pointpos] - '0') / pow(10, i + 1);
      }

      auto number = std::make_shared<NumNode>();
      number->value = sign * num;
      output.push(number);

      sign = +1;
      expectingNumber = false;
      continue;
    }

    if (expectingNumber && input.top() == '+') {
      input.pop();
      continue;
    }
    if (expectingNumber && input.top() == '-') {
      sign *= -1;
      input.pop();
      continue;
    }

    char next = input.top();
    input.pop();

    switch (next) {
      case '+':
      case '-':
      case '/':
      case 'x':
      case '^':
        // while ((there is an operator at the top of the operator stack)
        while (!operators.empty()
               // and (the operator at the top of the operator stack is not a left parenthesis))
               && operators.top() != '('
               // and ((the operator at the top of the operator stack has greater precedence)
               && (getPrecedence(operators.top()) > getPrecedence(next)
                   // or (the operator at the top of the operator stack has equal precedence and the token is left associative))
                   || (getPrecedence(operators.top()) == getPrecedence(next) && leftAssociative(next)))) {
          // need two elements on the output stack to add a binary operator
          if (output.size() < 2) {
            motorController.RunForDuration(10);
            return;
          }
          auto node = std::make_shared<BinOp>();
          node->right = output.top();
          output.pop();
          node->left = output.top();
          output.pop();
          node->op = operators.top();
          operators.pop();
          output.push(node);
        }
        operators.push(next);
        expectingNumber = true;
        break;
      case '(':
        // we expect there to be a binary operator here but found a left parenthesis. this occurs in terms like this: a+b(c). This should be
        // interpreted as a+b*(c)
        if (!expectingNumber) {
          operators.push('x');
        }
        operators.push(next);
        expectingNumber = true;
        break;
      case ')':
        while (operators.top() != '(') {
          // need two elements on the output stack to add a binary operator
          if (output.size() < 2) {
            motorController.RunForDuration(10);
            return;
          }
          auto node = std::make_shared<BinOp>();
          node->right = output.top();
          output.pop();
          node->left = output.top();
          output.pop();
          node->op = operators.top();
          operators.pop();
          output.push(node);
          if (operators.empty()) {
            motorController.RunForDuration(10);
            return;
          }
        }
        // discard the left parentheses
        operators.pop();
    }
  }
  while (!operators.empty()) {
    char op = operators.top();
    if (op == ')' || op == '(') {
      motorController.RunForDuration(10);
      return;
    }
    // need two elements on the output stack to add a binary operator
    if (output.size() < 2) {
      motorController.RunForDuration(10);
      return;
    }
    auto node = std::make_shared<BinOp>();
    node->right = output.top();
    output.pop();
    node->left = output.top();
    output.pop();
    node->op = op;
    operators.pop();
    output.push(node);
  }
  // perform the calculation
  errno = 0;
  double resultFloat = output.top()->calculate();
  if (errno != 0) {
    motorController.RunForDuration(10);
    return;
  }
  // make sure the result fits in a 32 bit int
  if (INT32_MAX < resultFloat || INT32_MIN > resultFloat) {
    motorController.RunForDuration(10);
    return;
  }
  // weird workaround because sprintf crashes when trying to use a float
  int32_t upper = resultFloat;
  int32_t lower = round(std::abs(resultFloat - upper) * 10000);
  // round up to the next int value
  if (lower >= 10000) {
    lower = 0;
    upper++;
  }
  // see if decimal places have to be printed
  if (lower != 0) {
    if (upper == 0 && resultFloat < 0) {
      position = sprintf(text, "-%ld.%ld", upper, lower);
    } else {
      position = sprintf(text, "%ld.%ld", upper, lower);
    }
    // remove extra zeros
    while (text[position - 1] == '0') {
      position--;
    }
  } else {
    position = sprintf(text, "%ld", upper);
  }
}

void Calculator::OnButtonEvent(lv_obj_t* obj, lv_event_t event) {
  if (event == LV_EVENT_CLICKED) {
    if (obj == buttonMatrix) {
      const char* buttonstr = lv_btnmatrix_get_active_btn_text(obj);
      if (*buttonstr == '=') {
        eval();
      } else {
        if (position >= 30) {
          motorController.RunForDuration(10);
          return;
        }
        text[position] = *buttonstr;
        position++;
      }
    } else if (obj == returnButton) {
      if (position > 1) {

        position--;
      } else {
        position = 0;
        lv_label_set_text(result, "0");
        return;
      }
    }

    text[position] = '\0';
    lv_label_set_text(result, text);
  }
}

bool Calculator::OnTouchEvent(Pinetime::Applications::TouchEvents event) {
  if (event == Pinetime::Applications::TouchEvents::LongTap) {
    position = 0;
    lv_label_set_text(result, "0");
    return true;
  }
  if (event == Pinetime::Applications::TouchEvents::SwipeLeft) {
    lv_btnmatrix_set_map(buttonMatrix, buttonMap2);
    return true;
  }
  if (event == Pinetime::Applications::TouchEvents::SwipeRight) {
    lv_btnmatrix_set_map(buttonMatrix, buttonMap1);
    return true;
  }
  return false;
}
||||||| 09db67e0
=======
#include <cmath>
#include <cinttypes>
#include <libraries/log/nrf_log.h>
#include "Calculator.h"
#include "displayapp/InfiniTimeTheme.h"
#include "Symbols.h"

using namespace Pinetime::Applications::Screens;

static void eventHandler(lv_obj_t* obj, lv_event_t event) {
  auto app = static_cast<Calculator*>(obj->user_data);
  app->OnButtonEvent(obj, event);
}

Calculator::~Calculator() {
  lv_obj_clean(lv_scr_act());
}

static const char* buttonMap[] = {"7", "8", "9", Symbols::backspace, "\n", "4", "5", "6", "+ -", "\n", "1", "2", "3", "* /", "\n", ".", "0",
                                  "=", "^", ""};

Calculator::Calculator(DisplayApp* app) : Screen(app) {
  resultLabel = lv_label_create(lv_scr_act(), nullptr);
  lv_label_set_long_mode(resultLabel, LV_LABEL_LONG_CROP);
  lv_label_set_align(resultLabel, LV_LABEL_ALIGN_RIGHT);
  lv_label_set_text_fmt(resultLabel, "%" PRId64, result);
  lv_obj_set_size(resultLabel, 200, 20);
  lv_obj_set_pos(resultLabel, 10, 5);

  valueLabel = lv_label_create(lv_scr_act(), nullptr);
  lv_label_set_long_mode(valueLabel, LV_LABEL_LONG_CROP);
  lv_label_set_align(valueLabel, LV_LABEL_ALIGN_RIGHT);
  lv_label_set_text_fmt(valueLabel, "%" PRId64, value);
  lv_obj_set_size(valueLabel, 200, 20);
  lv_obj_set_pos(valueLabel, 10, 35);

  buttonMatrix = lv_btnmatrix_create(lv_scr_act(), nullptr);
  buttonMatrix->user_data = this;
  lv_obj_set_event_cb(buttonMatrix, eventHandler);
  lv_btnmatrix_set_map(buttonMatrix, buttonMap);
  lv_btnmatrix_set_one_check(buttonMatrix, true);
  lv_obj_set_size(buttonMatrix, 238, 180);
  lv_obj_set_style_local_bg_color(buttonMatrix, LV_BTNMATRIX_PART_BTN, LV_STATE_DEFAULT, Colors::bgAlt);
  lv_obj_set_style_local_pad_inner(buttonMatrix, LV_BTNMATRIX_PART_BG, LV_STATE_DEFAULT, 1);
  lv_obj_set_style_local_pad_top(buttonMatrix, LV_BTNMATRIX_PART_BG, LV_STATE_DEFAULT, 1);
  lv_obj_set_style_local_pad_bottom(buttonMatrix, LV_BTNMATRIX_PART_BG, LV_STATE_DEFAULT, 1);
  lv_obj_set_style_local_pad_left(buttonMatrix, LV_BTNMATRIX_PART_BG, LV_STATE_DEFAULT, 1);
  lv_obj_set_style_local_pad_right(buttonMatrix, LV_BTNMATRIX_PART_BG, LV_STATE_DEFAULT, 1);
  lv_obj_align(buttonMatrix, nullptr, LV_ALIGN_IN_BOTTOM_MID, 0, 0);

  lv_obj_set_style_local_bg_opa(buttonMatrix, LV_BTNMATRIX_PART_BTN, LV_STATE_CHECKED, LV_OPA_COVER);
  lv_obj_set_style_local_bg_grad_stop(buttonMatrix, LV_BTNMATRIX_PART_BTN, LV_STATE_CHECKED, 128);
  lv_obj_set_style_local_bg_main_stop(buttonMatrix, LV_BTNMATRIX_PART_BTN, LV_STATE_CHECKED, 128);
}

void Calculator::OnButtonEvent(lv_obj_t* obj, lv_event_t event) {
  if ((obj == buttonMatrix) && (event == LV_EVENT_PRESSED)) {
    HandleInput();
  }
}

void Calculator::HandleInput() {
  const char* buttonText = lv_btnmatrix_get_active_btn_text(buttonMatrix);

  if (buttonText == nullptr) {
    return;
  }

  if ((equalSignPressed && (*buttonText != '=')) || (error != Error::None)) {
    ResetInput();
    UpdateOperation();
  }

  // we only compare the first char because it is enough
  switch (*buttonText) {
    case '0':
    case '1':
    case '2':
    case '3':
    case '4':
    case '5':
    case '6':
    case '7':
    case '8':
    case '9':
      // if this is true, we already pressed the . button
      if (offset < FIXED_POINT_OFFSET) {
        // *buttonText is the first char in buttonText
        // "- '0'" results in the int value of the char
        value += offset * (*buttonText - '0');
        offset /= 10;
      } else if (value <= MAX_VALUE / 10) {
        value *= 10;
        value += offset * (*buttonText - '0');
      }

      NRF_LOG_INFO(". offset: %" PRId64, offset);
      NRF_LOG_INFO(". value: %" PRId64, value);
      NRF_LOG_INFO(". result: %" PRId64, result);
      break;

    case '.':
      if (offset == FIXED_POINT_OFFSET) {
        offset /= 10;
      }

      NRF_LOG_INFO(". offset: %" PRId64, offset);
      NRF_LOG_INFO(". value: %" PRId64, value);
      NRF_LOG_INFO(". result: %" PRId64, result);
      break;

    // for every operator we:
    // - eval the current operator if value > FIXED_POINT_OFFSET
    // - then set the new operator
    // - + and - as well as * and / cycle on the same button
    case '+':
      if (value != 0) {
        Eval();
        ResetInput();
      }

      switch (operation) {
        case '+':
          operation = '-';
          break;
        case '-':
          operation = ' ';
          break;
        default:
          operation = '+';
          break;
      }
      UpdateOperation();
      break;

    case '*':
      if (value != 0) {
        Eval();
        ResetInput();
      }

      switch (operation) {
        case '*':
          operation = '/';
          break;
        case '/':
          operation = ' ';
          break;
        default:
          operation = '*';
          break;
      }
      UpdateOperation();
      break;

    case '^':
      if (value != 0) {
        Eval();
        ResetInput();
      }

      if (operation == '^') {
        operation = ' ';
      } else {
        operation = '^';
      }
      UpdateOperation();
      break;

    // this is a little hacky because it matches only the first char
    case Symbols::backspace[0]:
      if (value != 0) {
        // delete one value digit
        if (offset < FIXED_POINT_OFFSET) {
          if (offset == 0) {
            offset = 1;
          } else {
            offset *= 10;
          }
        } else {
          value /= 10;
        }
        if (offset < FIXED_POINT_OFFSET) {
          value -= value % (10 * offset);
        } else {
          value -= value % offset;
        }
      } else if (offset < FIXED_POINT_OFFSET) {
        if (offset == 0) {
          offset = 1;
        } else {
          offset *= 10;
        }
      } else {
        // reset the result
        result = 0;
      }

      NRF_LOG_INFO(". offset: %" PRId64, offset);
      NRF_LOG_INFO(". value: %" PRId64, value);
      NRF_LOG_INFO(". result: %" PRId64, result);

      operation = ' ';
      break;

    case '=':
      equalSignPressed = true;
      Eval();
      // If the operation is ' ' then we move the value to the result.
      // We reset the input after this.
      // This seems more convenient.
      if (operation == ' ') {
        ResetInput();
      }
      break;
  }

  UpdateValueLabel();
  UpdateResultLabel();
}

void Calculator::UpdateOperation() const {
  switch (operation) {
    case '+':
      lv_obj_set_style_local_bg_grad_dir(buttonMatrix, LV_BTNMATRIX_PART_BTN, LV_STATE_CHECKED, LV_GRAD_DIR_HOR);
      lv_obj_set_style_local_bg_color(buttonMatrix, LV_BTNMATRIX_PART_BTN, LV_STATE_CHECKED, Colors::deepOrange);
      lv_obj_set_style_local_bg_grad_color(buttonMatrix, LV_BTNMATRIX_PART_BTN, LV_STATE_CHECKED, Colors::bgAlt);
      lv_btnmatrix_set_btn_ctrl(buttonMatrix, 7, LV_BTNMATRIX_CTRL_CHECK_STATE);
      break;
    case '-':
      lv_obj_set_style_local_bg_grad_dir(buttonMatrix, LV_BTNMATRIX_PART_BTN, LV_STATE_CHECKED, LV_GRAD_DIR_HOR);
      lv_obj_set_style_local_bg_color(buttonMatrix, LV_BTNMATRIX_PART_BTN, LV_STATE_CHECKED, Colors::bgAlt);
      lv_obj_set_style_local_bg_grad_color(buttonMatrix, LV_BTNMATRIX_PART_BTN, LV_STATE_CHECKED, Colors::deepOrange);
      lv_btnmatrix_set_btn_ctrl(buttonMatrix, 7, LV_BTNMATRIX_CTRL_CHECK_STATE);
      break;
    case '*':
      lv_obj_set_style_local_bg_grad_dir(buttonMatrix, LV_BTNMATRIX_PART_BTN, LV_STATE_CHECKED, LV_GRAD_DIR_HOR);
      lv_obj_set_style_local_bg_color(buttonMatrix, LV_BTNMATRIX_PART_BTN, LV_STATE_CHECKED, Colors::deepOrange);
      lv_obj_set_style_local_bg_grad_color(buttonMatrix, LV_BTNMATRIX_PART_BTN, LV_STATE_CHECKED, Colors::bgAlt);
      lv_btnmatrix_set_btn_ctrl(buttonMatrix, 11, LV_BTNMATRIX_CTRL_CHECK_STATE);
      break;
    case '/':
      lv_obj_set_style_local_bg_grad_dir(buttonMatrix, LV_BTNMATRIX_PART_BTN, LV_STATE_CHECKED, LV_GRAD_DIR_HOR);
      lv_obj_set_style_local_bg_color(buttonMatrix, LV_BTNMATRIX_PART_BTN, LV_STATE_CHECKED, Colors::bgAlt);
      lv_obj_set_style_local_bg_grad_color(buttonMatrix, LV_BTNMATRIX_PART_BTN, LV_STATE_CHECKED, Colors::deepOrange);
      lv_btnmatrix_set_btn_ctrl(buttonMatrix, 11, LV_BTNMATRIX_CTRL_CHECK_STATE);
      break;
    case '^':
      lv_obj_set_style_local_bg_grad_dir(buttonMatrix, LV_BTNMATRIX_PART_BTN, LV_STATE_CHECKED, LV_GRAD_DIR_NONE);
      lv_obj_set_style_local_bg_color(buttonMatrix, LV_BTNMATRIX_PART_BTN, LV_STATE_CHECKED, Colors::deepOrange);
      lv_btnmatrix_set_btn_ctrl(buttonMatrix, 15, LV_BTNMATRIX_CTRL_CHECK_STATE);
      break;
    default:
      lv_btnmatrix_clear_btn_ctrl_all(buttonMatrix, LV_BTNMATRIX_CTRL_CHECK_STATE);
      break;
  }
}

void Calculator::ResetInput() {
  value = 0;
  offset = FIXED_POINT_OFFSET;
  operation = ' ';
  equalSignPressed = false;
  error = Error::None;
}

void Calculator::UpdateResultLabel() const {
  int64_t integer = result / FIXED_POINT_OFFSET;
  int64_t remainder = result % FIXED_POINT_OFFSET;

  if (remainder == 0) {
    lv_label_set_text_fmt(resultLabel, "%" PRId64, integer);
    return;
  }

  if (remainder < 0) {
    remainder = -remainder;
  }

  uint8_t min_width = N_DECIMALS;

  // cut "0"-digits on the right
  while ((remainder > 0) && (remainder % 10 == 0)) {
    remainder /= 10;
    min_width--;
  }

  lv_label_set_text_fmt(resultLabel, "%" PRId64 ".%0*" PRId64, integer, min_width, remainder);
}

void Calculator::UpdateValueLabel() {
  switch (error) {
    case Error::TooLarge:
      lv_label_set_text_static(valueLabel, "too large");
      break;
    case Error::ZeroDivision:
      lv_label_set_text_static(valueLabel, "zero division");
      break;
    case Error::None:
    default: {
      int64_t integer = value / FIXED_POINT_OFFSET;
      int64_t remainder = value % FIXED_POINT_OFFSET;

      int64_t printRemainder = remainder < 0 ? -remainder : remainder;

      uint8_t min_width = 0;
      int64_t tmp_offset = offset;

      // TODO there has to be a simpler way to do this
      if (tmp_offset == 0) {
        tmp_offset = 1;
        min_width = 1;
      }
      while (tmp_offset < FIXED_POINT_OFFSET) {
        tmp_offset *= 10;
        min_width++;
      }
      min_width--;

      for (uint8_t i = min_width; i < N_DECIMALS; i++) {
        printRemainder /= 10;
      }

      if (offset == FIXED_POINT_OFFSET) {
        lv_label_set_text_fmt(valueLabel, "%" PRId64, integer);
      } else if ((offset == (FIXED_POINT_OFFSET / 10)) && (remainder == 0)) {
        lv_label_set_text_fmt(valueLabel, "%" PRId64 ".", integer);
      } else {
        lv_label_set_text_fmt(valueLabel, "%" PRId64 ".%0*" PRId64, integer, min_width, printRemainder);
      }
    } break;
  }
}

// update the result based on value and operation
void Calculator::Eval() {
  switch (operation) {
    case ' ':
      result = value;
      break;

    case '+':
      // check for overflow
      if (((result > 0) && (value > (MAX_VALUE - result))) || ((result < 0) && (value < (MIN_VALUE - result)))) {
        error = Error::TooLarge;
        break;
      }

      result += value;
      break;
    case '-':
      // check for overflow
      if (((result < 0) && (value > (MAX_VALUE + result))) || ((result > 0) && (value < (MIN_VALUE + result)))) {
        error = Error::TooLarge;
        break;
      }

      result -= value;
      break;
    case '*':
      // check for overflow
      // while dividing we eliminate the fixed point offset
      // therefore we have to multiply it again for the comparison with value
      if (((result != 0) && (value > (FIXED_POINT_OFFSET * (MAX_VALUE / result)))) ||
          ((result != 0) && (value < (FIXED_POINT_OFFSET * (MIN_VALUE / result))))) {
        error = Error::TooLarge;
        break;
      }

      result *= value;
      // fixed point offset was multiplied too
      result /= FIXED_POINT_OFFSET;
      break;
    case '/':
      // check for zero division
      if (value == 0) {
        error = Error::ZeroDivision;
        break;
      }

      // fixed point offset will be divided too
      result *= FIXED_POINT_OFFSET;
      result /= value;
      break;

    // we use floats here because pow with fixed point numbers is weird
    case '^': {
      auto tmp_value = static_cast<double>(value);
      tmp_value /= static_cast<double>(FIXED_POINT_OFFSET);

      auto tmp_result = static_cast<double>(result);
      tmp_result /= static_cast<double>(FIXED_POINT_OFFSET);

      // check for overflow
      // result^value > MAX_VALUE iff
      // log2(result^value) > log2(MAX_VALUE) iff
      // value * log2(result) > log2(MAX_VALUE)
      if ((tmp_value * log2(std::abs(tmp_result))) > log2(static_cast<double>(MAX_VALUE))) {
        error = Error::TooLarge;
        break;
      }

      tmp_result = pow(tmp_result, tmp_value);
      tmp_result *= static_cast<double>(FIXED_POINT_OFFSET);
      result = static_cast<int64_t>(tmp_result);
      break;
    }

    default:
      break;
  }
}
>>>>>>> cd4755fcd7c064996dc76cc965d0b8615848255f
